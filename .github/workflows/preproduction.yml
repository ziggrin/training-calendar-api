name: Deploy preprod

on:
  workflow_dispatch:
    inputs:
        envToRun:
          type: choice
          description: 'Env to run [ test | ci | preprod | prod ]'
          required: true
          default: "ci"
          options:
            - "test"
            - "ci"
            - "preprod"
            - "prod"

jobs:

  deploy:
    runs-on: ubuntu-latest
    timeout-minutes: 20
    environment: ${{ inputs.envToRun }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id:     ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-north-1
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: backend - Build, tag, and push image to Amazon ECR
        id: backend-build-image
        env:
          APP_ECR_REGISTRY:   ${{ steps.login-ecr.outputs.registry }}
          APP_ECR_REPOSITORY: training-calendar-api-preprod-app
          IMAGE_TAG:          ${{ github.sha }}
        run: |
          docker build -t $APP_ECR_REGISTRY/$APP_ECR_REPOSITORY:$IMAGE_TAG -f app.Dockerfile .
          docker tag $APP_ECR_REGISTRY/$APP_ECR_REPOSITORY:$IMAGE_TAG $APP_ECR_REGISTRY/$APP_ECR_REPOSITORY:latest
          docker push $APP_ECR_REGISTRY/$APP_ECR_REPOSITORY:$IMAGE_TAG  --all-tags
          echo "image=$APP_ECR_REGISTRY/$APP_ECR_REPOSITORY:$IMAGE_TAG" >> "$GITHUB_OUTPUT"

      - name: nginx - Build, tag, and push image to Amazon ECR
        id: nginx-build-image
        env:
          NGINX_ECR_REGISTRY:   ${{ steps.login-ecr.outputs.registry }}
          NGINX_ECR_REPOSITORY: training-calendar-api-preprod-nginx
          IMAGE_TAG:            ${{ github.sha }}
        run: |
          docker build -t $NGINX_ECR_REGISTRY/$NGINX_ECR_REPOSITORY:$IMAGE_TAG -f nginx.Dockerfile .
          docker push $NGINX_ECR_REGISTRY/$NGINX_ECR_REPOSITORY:$IMAGE_TAG
          echo "image=$NGINX_ECR_REGISTRY/$NGINX_ECR_REPOSITORY:$IMAGE_TAG" >> "$GITHUB_OUTPUT"

      - name: Download task definition preprod-training-calendar-api
        run: |
          aws ecs describe-task-definition --task-definition preprod-training-calendar-api --query taskDefinition > task-definition.json

      - name: Fill in the new app image ID in the Amazon ECS task definition
        id: backend-task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-definition.json
          container-name:  app
          image:           ${{ steps.backend-build-image.outputs.image }}

      - name: Fill in the new nginx image ID in the Amazon ECS task definition
        id: nginx-task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ steps.backend-task-def.outputs.task-definition }}
          container-name:  nginx
          image:           ${{ steps.nginx-build-image.outputs.image }}

      # - name: Deploy Amazon ECS task definition api-pack
      #   uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      #   with:
      #     task-definition: ${{ steps.nginx-task-def.outputs.task-definition }}
      #     service: preprod-training-calendar-api
      #     cluster: preprod-training-calendar
      #     wait-for-service-stability: true